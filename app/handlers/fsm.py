from app.keyboards.ReplyKeyboard import main_buttons, cancel_buttons

from app.database.repository import Repository as rep
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart


class Reg_api(StatesGroup):
    api_name = State()
    api = State()
    passsword = State()

class Reg_user(StatesGroup):
    password = State()
    
    
fsmRouter = Router()


@fsmRouter.message(CommandStart())
async def start_message(message: Message, state: FSMContext):
    user = await rep.get_user(message.from_user.id)
    if user != 0:
        await state.clear()
        api_names = await rep.get_api_names(message.from_user.id)
        await message.answer(
            f'üåü–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!üåü –¢—ã –ø–æ–ø–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É WBchecker! üöÄ –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ',
            reply_markup=await main_buttons(list(api_names))
        )
    else:
        await message.answer(
            text=f'üåü–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!üåü –¢—ã –ø–æ–ø–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É WBchecker! üöÄ '
                 '–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
        )
        await state.set_state(Reg_user.password)


@fsmRouter.message(Reg_user.password)
async def register_user(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    data = await state.get_data()
    await rep.add_user(id=message.from_user.id, full_name=message.from_user.full_name, username=message.from_user.username, password=data['password'])
    await state.clear()
    api_names = await rep.get_api_names(message.from_user.id)
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É", 
                         reply_markup=await main_buttons(list(api_names)))





@fsmRouter.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å API wildberriesüîå")
async def reg_api_step1(message: Message, state: FSMContext):
    await state.set_state(Reg_api.api)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π API –∫–ª—é—á", reply_markup=cancel_buttons)


@fsmRouter.message(Reg_api.api)
async def reg_api_step2(message: Message, state: FSMContext):
    await state.update_data(api=message.text)
    await state.set_state(Reg_api.api_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å —Å–≤–æ–π API –≤ –±–æ—Ç–µ")






@fsmRouter.message(Reg_api.api_name)
async def reg_api_step3(message: Message, state: FSMContext):
    await state.update_data(api_name="m_"+message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    await state.set_state(Reg_api.passsword)


@fsmRouter.message(Reg_api.passsword)
async def reg_api_verify_pass(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    password = await rep.get_user_password(message.from_user.id)
    data = await state.get_data()
    if data['password'] != password:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        await state.clear()
    else:
        print(f"User ID: {message.from_user.id}, API: {data['api']}, API Name: {data['api_name']}")
        await rep.add_api(user_id=message.from_user.id, api_key=data['api'], api_name=data['api_name'])
        await state.clear()
        api_names = await rep.get_api_names(message.from_user.id)
        await message.answer("API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É", 
                reply_markup=await main_buttons(list(api_names)))

    

@fsmRouter.callback_query(F.data == "cancel")
async def cancel(call: CallbackQuery):
    await call.answer()
    api_names = await rep.get_api_names(call.message.from_user.id)
    await call.message.answer("–≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await main_buttons(list(api_names)))


    