from app.keyboards.ReplyKeyboard import articles_manage_buttons, main_buttons
from app.keyboards.InlineKeyboard import cancel_buttons
from app.database.repository import Repository as rep
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.wildberries.marketplace import fetch_sales
from aiogram import Router, F
from aiogram.types import Message

artRouter = Router()


class choice(StatesGroup):
    api_key = State()
    choice = State()
    #–≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É–±—Ä–∞—Ç—å –ª–∏–±–æ –¥–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª
    article = State()
    quantity = State()
    

@artRouter.message(F.text.regexp(r"^m_.*"))
async def testik(message: Message, state: FSMContext):
    api_key = list(await rep.get_api_key(message.from_user.id, message.text))[0]
    await state.update_data(api_key=api_key)
    display_name = str(message.text).split("_")[1]
    await message.answer(f"–≤—ã –≤–æ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {display_name}üõí", reply_markup=articles_manage_buttons)
    await message.answer("–ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚¨áÔ∏è", reply_markup=cancel_buttons)
    await state.set_state(choice.choice)
    
@artRouter.message(choice.choice)
async def choice_state(message: Message, state: FSMContext):
    await state.update_data(choice=message.text)
    data = await state.get_data()
    if message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà":
        totalPrice = 0
        SalesOn = 0
        items = await fetch_sales(api_key=data['api_key'])
        for item in items:
            totalPrice += int(item['finishedPrice'])
            SalesOn += int(item['priceWithDisc'])
        await message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Üüìä\n–ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–∂: {len(items)}\n–ò—Ç–æ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –Ω–∞: {totalPrice}rub\n–ü—Ä–æ–¥–∞–Ω–æ –±–µ–∑ —Å–∫–∏–¥–æ–∫ –∏ —Ç.–¥. –Ω–∞ {SalesOn}rub")
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª‚ûï":
        await state.set_state(choice.article)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª", reply_markup=cancel_buttons)
    elif message.text == "–£–±—Ä–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª‚ûñ":
        await state.set_state(choice.article)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª", reply_markup=cancel_buttons)
    else:
        await message.answer("–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è!", reply_markup=cancel_buttons)
    
@artRouter.message(choice.article)
async def choice_art(message: Message, state: FSMContext):
    await state.update_data(article=message.text)
    await message.answer("–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ?", reply_markup=cancel_buttons)
    await state.set_state(choice.quantity)

@artRouter.message(choice.quantity)
async def choice_quantity(message: Message, state: FSMContext):
    try:
        int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ!", reply_markup=cancel_buttons)
        await state.set_state(choice.quantity)
        return
    await state.update_data(quantity=message.text)
    data = await state.get_data()
    if data['choice'] == "–î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª‚ûï":
        await rep.add_article_count(token=data['api_key'], art=data['article'], count=data['quantity'])
        api_names = await rep.get_api_names(message.from_user.id)
        await message.answer(f"–ê—Ä—Ç–∏–∫—É–ª {data['article']}, —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {data['quantity']} —à—Ç—É–∫üíº", reply_markup=await main_buttons(list(api_names)))
        
        await state.clear()
    elif data['choice'] == "–£–±—Ä–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª‚ûñ":
        code = await rep.minus_article_to_sklad(data['article'], int(data['quantity']), data['api_key'])
        if code == 404:
            await message.answer("–¢–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö‚ùó\n–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –æ—à–∏–±–ª–∏—Å—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ªüìì")
            await state.set_state(choice.article)
        elif code == 400:
            await message.answer("–ê—Ä—Ç–∏–∫—É–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Öüí•")
            await state.set_state(choice.article)
        else:
            await message.answer(f"–ê—Ä—Ç–∏–∫—É–ª {data['article']}, —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω–æ {data['quantity']} —à—Ç—É–∫üíº")

    

