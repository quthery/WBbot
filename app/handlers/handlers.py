from aiogram import Router, F
from aiogram.types import Message
from app.database.repository import Repository as rep
from app.keyboards.ReplyKeyboard import main_buttons
from app.keyboards.InlineKeyboard import cancel_buttons
import aiohttp
import asyncio


router = Router()



@router.message(F.text == "FAQüìñ")
async def FAQ(message: Message):
    await message.answer("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\nhttps://telegra.ph/FAQ-WBcheckerBot-08-03", reply_markup=await main_buttons(list(await rep.get_api_names(message.from_user.id))))


@router.message(F.text == "–ù–∞—á–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤‚åö")
async def wait_for_order(message: Message):
    url = "https://marketplace-api.wildberries.ru/api/v3/orders/new"
    
    async with aiohttp.ClientSession() as session:
        tokens = await rep.get_api_keys(message.from_user.id)
        while True:
            for token in tokens:
                print(token)
                async with session.get(url, headers={"Authorization": token}) as response:
                    if response.status == 200:
                        data = await response.json()
                        orders = data.get("orders", [])
                        articles = await rep.get_articles(token)
                        for order in orders:
                            article = order.get("article")
                            uid = order.get('orderUid')
                            uids = await rep.get_uids(uid)
                            print(article)
                            print(uids)
                            if article in articles and uid not in uids:
                                await message.answer(f"–ù–ê –ê–†–¢–ò–ö–£–õ {article} –ü–†–ò–®–ï–õ –ó–ê–ö–ê–ó –°–û–ë–ï–†–ò–¢–ï –ï–ì–û –ò –£–ë–ï–†–ò–¢–ï 1 –ü–û–ó–ò–¶–ò–Æ –° –û–°–¢–ê–¢–ö–ê")
                                await rep.add_uid(uid, article)
            await asyncio.sleep(5)#—Ä–∞–∑ –≤ 5 —Å–µ–∫ –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –∫–∞–∫ –≤–∏–¥–∏—à—å –µ—â–µ —Ä–∞–∑ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—å—Å—è —Ç–∞–∫ –∫–∞–∫ –æ—Ä–¥–µ—Ä –∞–π–¥–∏ —É –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –æ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—å—Å—è –µ—â–µ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ —á—Ç–æ –º–æ–∂–Ω–æ –Ω–µ—Å–∫–ª—å–∫–æ –∞–ø–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ –≤—Å–µ –æ–∫ –±—É–¥–µ—Ç 








        

    

# @fsmRouter.callback_query_handler(lambda c: c.data.startswith('button_'))
# async def process_button(callback_query: CallbackQuery):
#     data = callback_query.data.split('_')
#     index = int(data[1])  # –ò–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏
#     text = data[2]         # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

#     await callback_query.answer(f'–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É: {text} —Å –∏–Ω–¥–µ–∫—Å–æ–º: {index}')


    
    
    



    
        
    

    

    







